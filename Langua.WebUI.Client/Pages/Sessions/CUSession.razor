@rendermode @(new InteractiveAutoRenderMode(false))
@inherits BasePageClient
<RadzenCard>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Session</RadzenAlert>
    <RadzenTemplateForm TItem="Models.Session" Data="@Session" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@Session.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="@L["Name is required"]" DefaultValue="0" />

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Group" Component="Group" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Disabled="IsForGroup" Data="@groupsForGroupId" TextProperty="Name" ValueProperty="Id" AllowClear=true
                                Placeholder="Choose Group" style="display: block; width: 100%" @bind-Value="@Session.GroupId" Name="GroupId"
                                Count=@groupsForGroupIdCount LoadData=@groupsForGroupIdLoadData />

                <RadzenRequiredValidator Component="GroupId" Text="@L["teacher is required"]" DefaultValue="0" />

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Teacher" Component="Teacher" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Disabled="!IsForGroup" Data="@teachersForTeacherId" TextProperty="FullName" ValueProperty="Id" AllowClear=true
                                Placeholder="Choose Teacher" style="display: block; width: 100%" @bind-Value="@Session.TeacherId" Name="TeacherId"
                                Count=@teachersForTeacherIdCount LoadData=@teachersForTeacherIdLoadData />
                <RadzenRequiredValidator Component="TeacherId" Text="@L["teacher is required"]" DefaultValue="0" />

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Start" Component="Start" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="dd/MM/yyyy HH:mm" style="display: block; width: 100%" @bind-Value="@Session.Start" Name="Start" ShowTime="true" />
                <RadzenRequiredValidator Component="Start" Text="Start is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="End" Component="End" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">

                <RadzenDatePicker YearRange="0" id="duree" ShowCalendarWeek="false" class="HideDate" ShowDays="false" DateFormat="HH:mm" style="display: block; width: 100%" @bind-Value="@Session.End" Name="End" ShowTime="true" />
                <RadzenRequiredValidator Component="End" Text="End is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" IsBusy="SubmitClicked" BusyText="@L["Submiting..."]" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@(args=>dialogService.Close())" Visible=false />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code{
    [Parameter] public int SessionId { get; set; }
    [Parameter] public int GroupOrTeacherId { get; set; }
    [Parameter] public bool IsForGroup { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public DateTime Start { get; set; }

    protected bool errorVisible,SubmitClicked;
    protected Models.Session? Session;

    protected IEnumerable<Models.Groups>? groupsForGroupId;

    protected IEnumerable<Models.Teacher>? teachersForTeacherId;


    protected int groupsForGroupIdCount;
    protected Models.Groups? groupsForGroupIdValue;
    protected int count;
    protected bool isEdit = false;
    protected bool addCliecked = false;
    protected async Task groupsForGroupIdLoadData(LoadDataArgs args)
    {
        try
        {
            var filter = $"contains(Name, '{(!string.IsNullOrEmpty(args.Filter) ? args.Filter : "")}')";
            //var result = await LangClientService.GetGroups(top: args.Top, skip: args.Skip, count: args.Top != null && args.Skip != null, filter: $"contains(Name, '{(!string.IsNullOrEmpty(args.Filter) ? args.Filter : "")}')", orderby: $"{args.OrderBy}");
            var result = await LangClientService.GetGroups();
            groupsForGroupId = result;
            groupsForGroupIdCount = result.Count();

        }
        catch (System.Exception ex)
        {
            Notify($"Error", $"Unable to load Group", NotificationSeverity.Error);
        }
    }

    protected int teachersForTeacherIdCount;
    protected Models.Teacher teachersForTeacherIdValue;
    protected async Task teachersForTeacherIdLoadData(LoadDataArgs args)
    {
        try
        {
            var result = await LangClientService.GetTeachers(top: args.Top, skip: args.Skip, count: args.Top != null && args.Skip != null, filter: /*$"contains(UserId, '{(!string.IsNullOrEmpty(args.Filter) ? args.Filter : "")}')",*/ null, orderby: $"{args.OrderBy}");
            teachersForTeacherId = result;
            teachersForTeacherIdCount = result.Count();

        }
        catch (System.Exception ex)
        {
            //NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load Teacher" });
        }
    }
    protected async Task FormSubmit()
    {
        try
        {
            SubmitClicked = true;
            if (Session.End.TimeOfDay < Session.Start.TimeOfDay)
            {
                Notify("Wrong Time Session", "Please enter a correct durre for session", NotificationSeverity.Warning);
                return;
            }
            Session.End = Session.Start + (Session.End.TimeOfDay - Session.Start.TimeOfDay);
            isEdit = Session.Id != 0;
            dynamic result = isEdit ? await LangClientService.UpdateSession(id: Session.Id, Session) : await LangClientService.CreateSession(Session);
            Notify("Success", "Successful completed", NotificationSeverity.Success);
            dialogService.Close();

        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
        finally
        {
            SubmitClicked = false;
        }
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    SemaphoreSlim semaphore = new SemaphoreSlim(1,1);
    protected override async Task OnInitializedAsync()
    {
        semaphore.Wait();
        try
        {
            if (SessionId != 0)
            {
                Session = await LangClientService!.GetSessionById(id: SessionId);
            }
            else
            {
                Session = new Session();
                Session.End = End;
                Session.Start = Start;
                if (IsForGroup)
                {
                    Session.GroupId = GroupOrTeacherId;
                }
                else
                {
                    Session.TeacherId = GroupOrTeacherId;
                }

            }
            semaphore.Release();
        }
        catch(Exception ex)
        {

        }
        finally
        {
            semaphore.Dispose();
        }


    }
}