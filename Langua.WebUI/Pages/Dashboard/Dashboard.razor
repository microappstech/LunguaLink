@page "/"
@page "/dashboard"
@using Langua.Models
@using Langua.Repositories.Services
@layout SideMainLayout

<PageTitle>Sample Blazor Dashboard | Free UI Components by Radzen</PageTitle>
<HeadContent>
    <meta name="description" content="Rich dashboard created with the Radzen Blazor Components library.">
</HeadContent>

<RadzenStack Gap="1rem" Style="position: relative">

    <RadzenRow> 
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <RadzenCard Style="position: relative; height :100px">
                <RadzenText TextStyle="TextStyle.H6">Nb Teachers</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Class="rz-color-success" Style="position: absolute; right: 1.5rem; top: 1rem;">@NbTeacher</RadzenText>
               @*
                   <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px;">
                        <RadzenColumnSeries Data=@openIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Issues" Fill="var(--rz-success)" />
                        <RadzenValueAxis Visible="false" />
                        <RadzenCategoryAxis Visible="false" />
                        <RadzenColumnOptions Margin="10" />
                        <RadzenLegend Visible="false" />
                    </RadzenChart> 
                *@
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <RadzenCard Style="position: relative; height :100px">
                <RadzenText TextStyle="TextStyle.H6">Nb Candidates</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Class="rz-color-danger" Style="position: absolute; right: 1.5rem; top: 1rem;">@NbCandidat</RadzenText>
                @* <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px;">
                    <RadzenColumnSeries Data=@closedIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Issues" Fill="var(--rz-danger)" />
                    <RadzenValueAxis Visible="false" />
                    <RadzenCategoryAxis Visible="false" />
                    <RadzenColumnOptions Margin="10" />
                    <RadzenLegend Visible="false" />
                </RadzenChart> *@
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <RadzenCard Style="position: relative; height :100px">
                <RadzenText TextStyle="TextStyle.H6">All Issues</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Style="position: absolute; right: 1.5rem; top: 1rem;">86</RadzenText>
                @*
                <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px;">
                <RadzenLineSeries Data=@openIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Open Issues" Smooth="true" Stroke="var(--rz-success)" />
                <RadzenLineSeries Data=@closedIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Closed Issues" Smooth="true" Stroke="var(--rz-danger)" />
                <RadzenValueAxis Visible="false" />
                <RadzenCategoryAxis Visible="false" />
                <RadzenLegend Visible="false" />
                </RadzenChart>
                *@
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <RadzenCard Style="position: relative; height :100px">
                <RadzenText TextStyle="TextStyle.H6">All Issues</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Style="position: absolute; right: 1.5rem; top: 1rem;">56</RadzenText>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code{

    public IEnumerable<Candidat> Candidates { get; set; }
    public IEnumerable<Teacher> Teachers { get; set; }
    public int NbTeacher;
    public int NbCandidat;

    [Inject] public BaseService baseService { get; set; }


    IEnumerable<IssueGroup> openIssuesByDate;
    IEnumerable<IssueGroup> closedIssuesByDate;

    private class IssueGroup
    {
        public int Count { get; set; }
        public DateTime Week { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        openIssuesByDate = new List<IssueGroup>()
        {
            new IssueGroup { Count=12,Week=new DateTime(2020,12,01) },
            new IssueGroup { Count=12,Week=new DateTime(2020,12,02) },
            new IssueGroup { Count=18,Week=new DateTime(2020,12,04) },
            new IssueGroup { Count=12,Week=new DateTime(2020,12,06) },
            new IssueGroup { Count=10,Week=new DateTime(2020,12,08) },
            new IssueGroup { Count=12,Week=new DateTime(2020,12,10) },
            new IssueGroup { Count=10,Week=new DateTime(2020,12,15) },
            new IssueGroup { Count=13,Week=new DateTime(2020,12,20) },
            new IssueGroup { Count=19,Week=new DateTime(2020,12,25) },
            new IssueGroup { Count=10, Week = new DateTime(2022,12,30) }
        };
        closedIssuesByDate = new List<IssueGroup>()
        {
            new IssueGroup{Count=12,Week=DateTime.UtcNow},
            new IssueGroup{Count=10,Week=new DateTime(1999,12,15)},
            new IssueGroup{Count=13,Week=new DateTime(2020,01,15)},
            new IssueGroup{Count=18,Week=new DateTime(2020,01,15)},
        };
        NbTeacher = await baseService.NBItems<Teacher>();
        NbCandidat = await baseService.NBItems<Candidat>();

    }


}