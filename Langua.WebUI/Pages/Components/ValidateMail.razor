@inherits BasePage
@using Langua.ModelView.InputModels
@using Langua.Repositories.Interfaces
<RadzenTemplateForm Data="@confirmMail" Submit="@((ConfirmEmail args) => { Submit(args); })">
    <RadzenCard>
        <RadzenRow class="mb-3">
            <RadzenColumn Size="3">
                <RadzenLabel Text="@L["Email"]"></RadzenLabel>
            </RadzenColumn>
            <RadzenColumn Size="9">
                <RadzenTextBox class="w-100" @bind-Value="confirmMail.Email" Disabled="true" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow class="mb-3">
            <RadzenColumn Size="3">
                <RadzenLabel Text="@L["Code"]"></RadzenLabel>
            </RadzenColumn>
            <RadzenColumn Size="9">
                <RadzenTextBox @oninput="@((args)=>VerificationCodeChanged(args.Value.ToString()))" class="w-100" @bind-Value="confirmMail.CodeVerification" />
                <RadzenLabel class="text-danger" Text="@Error" Visible="@(!string.IsNullOrEmpty(Error))"/>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenButton Disabled="@(DisabledBtn)" class="w-100 mx-auto" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Text="@L["Validate"]" />
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenButton BusyText="@timerDisplay" class="w-100 mx-auto" IsBusy=DisabledBtnResend ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Button" Click="ResendVerCode" Text="@L["Resend"]" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</RadzenTemplateForm>

@code{
    [Inject] private IMailService _mailService { get; set; }

    [Parameter] public string Email { get; set; }
    [Parameter] public string UserId { get; set; }
    public Timer timer;
    public string Error { get; set; }
    public bool DisabledBtn { get; set; } = true;
    public bool DisabledBtnResend { get; set; }
    private ConfirmEmail confirmMail { get; set; }
    protected override Task OnInitializedAsync()
    {
        confirmMail = new ConfirmEmail()
        {
            Email = this.Email
        };
        return base.OnInitializedAsync();
    }
    protected void VerificationCodeChanged(string value)
    {
        DisabledBtn = !(!string.IsNullOrEmpty(value) && value.Length == 6);
    }
    protected async Task Submit(ConfirmEmail args)
    {
        if (args.CodeVerification.Length != 6)
        {
            DisabledBtn = true;
            return;
        }
        var result = await Security.ConfirmMail(args, confirmMail.CodeVerification);
        if (!result)
        {
            Error = L["The code verification is not valid"];
            await InvokeAsync(StateHasChanged);
            return;
        }
        await InvokeAsync(StateHasChanged);
        dialogService.Close(true);
    }

    private int countdownSeconds = 60; // Initial countdown time in seconds
    private string timerDisplay { get; set; }
    private async void UpdateTimerDisplay()
    {
        await InvokeAsync(StateHasChanged);
        int minutes = countdownSeconds / 60;
        int seconds = countdownSeconds % 60;
        timerDisplay = $"{minutes:00}:{seconds:00}";
        await InvokeAsync(StateHasChanged);
    }
    public async Task ResendVerCode()
    {
        try
        {
            DisabledBtnResend = true;
            countdownSeconds = 60;
            UpdateTimerDisplay();
            var Candidate = await Security.GetById(UserId);
            while (countdownSeconds > 0)
            {
                await Task.Delay(1000);
                countdownSeconds--;
                UpdateTimerDisplay();
            }
            DisabledBtnResend = false;
            timerDisplay = "";
            var result = mailService.SendVerificationCode(Email, Email.Substring(0, Email.IndexOf("@")), Candidate.Code);
            
        }
        catch(Exception ex)
        {
            NotifyError(L["Error"], L["Something wrong, Please try agin"]);
        }
    }
}