@using System.Linq.Expressions
@inherits LanguaGridComponent

@typeparam TItem

<table class="table">
    <thead>
        <tr>
            @foreach (var column in Columns)
            {
                <th>
                    @column.Header 
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            <tr>
                @foreach (var column in Columns)
                {
                    <td>
                        @column.Template(item)
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="overflow-x-auto">
    <table class="w-full border-collapse border border-gray-300">
        <thead>
            <tr class="bg-gray-200">
                @foreach (var column in Columns)
                {
                    <th class="border-y border-gray-100 bg-gray-50/50 position-relative">
                        <span class=" p-2 block ">
                            @column.Header 
                        </span>
                        <InputText @bind-Value="@column.FilterValue" @ref="Filter" @onfocus="@((args)=>ShowCleanButton(args,column))" @oninput="@((args) => Search(args, column.Property))" class="p-2 w-full text-sm border attendees-count" />
                        <span  id="@($"Clean{column.Property.ToString()}")" class="position-absolute top-[50px] right-5 text-sm font-light hidden" @onclick="@(()=>ClearInput(column))">x</span>
                    </th>
                }
            </tr>
            <tr>
                @foreach (var column in Columns)
                {
                    <td class="border border-gray-300 px-4 py-2">
                    </td>
                }
                
                <td class="border border-gray-300 px-4 py-2">
                    <button onclick="removeRow(this)" class="p-2 text-red-600 ">
                        <svg class="w-6 h-6 " stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 24 24">
                            <path d="M 10 2 L 9 3 L 4 3 L 4 5 L 5 5 L 5 20 C 5 20.522222 5.1913289 21.05461 5.5683594 21.431641 C 5.9453899 21.808671 6.4777778 22 7 22 L 17 22 C 17.522222 22 18.05461 21.808671 18.431641 21.431641 C 18.808671 21.05461 19 20.522222 19 20 L 19 5 L 20 5 L 20 3 L 15 3 L 14 2 L 10 2 z M 7 5 L 17 5 L 17 20 L 7 20 L 7 5 z M 9 7 L 9 18 L 11 18 L 11 7 L 9 7 z M 13 7 L 13 18 L 15 18 L 15 7 L 13 7 z"></path>
                        </svg>
                    </button>
                </td>
            </tr>
        </thead>
        <tbody id="attendees-list">
                @foreach (var item in Items)
                {
                <tr class="hover:bg-gray-50">
                    @foreach (var column in Columns)
                    {
                        <td class="px-6 py-4 border border-1 border-gray-50">@column.Template(item)</td>
                    }
                    <td class="px-6 py-4  border border-1 border-gray-50">
                        <div class="flex justify-end gap-4">
                            <a x-data="{ tooltip: 'Delete' }" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     stroke-width="1.5"
                                     stroke="currentColor"
                                     class="h-6 w-6"
                                     x-tooltip="tooltip">
                                    <path stroke-linecap="round"
                                          stroke-linejoin="round"
                                          d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                </svg>
                            </a>
                            <a x-data="{ tooltip: 'Edite' }" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     stroke-width="1.5"
                                     stroke="currentColor"
                                     class="h-6 w-6"
                                     x-tooltip="tooltip">
                                    <path stroke-linecap="round"
                                          stroke-linejoin="round"
                                          d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125" />
                                </svg>
                            </a>
                        </div>
                    </td>
                </tr>
                }
        </tbody>
    </table>
</div>
@code {

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }
    [Parameter]
    public List<GridColumn<TItem>> Columns { get; set; }


    [Inject] public IJSRuntime JSRuntime { get; set; }
    public IEnumerable<TItem> OriginItems { get; set; } 
    bool isInputFocused = false;

    private Dictionary<string, string> FilterValues = new Dictionary<string, string>();

    public void Search(ChangeEventArgs args, string property)
    {
        if (args.Value != "" || !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            Items = OriginItems.Where(it => (bool)it.GetType().GetProperty(property)?.GetValue(it)?.ToString().ToLower()?.Contains(args.Value.ToString().ToLower()));
        }
        else
        {
            Items = OriginItems;
        }
    }

    protected override Task OnInitializedAsync()
    {
        OriginItems = Items;
        return base.OnInitializedAsync(); 
    }

    private async Task ClearInput(GridColumn<TItem> column)
    {
        column.FilterValue = ""; // Clear the input value
    }
    private async Task ShowCleanButton(FocusEventArgs e, GridColumn<TItem> column)
    {
        isInputFocused = true;
        
    }
}
