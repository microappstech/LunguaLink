@page "/Account/LoginPage"

@using System.ComponentModel.DataAnnotations
@using Langua.WebUI.Pages.Account
@using Langua.WebUI.Pages.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Langua.DataContext.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<LoginPage> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Langua | Log in</PageTitle>

<section class="vh-100">
    <div class="container-fluid h-custom">
        <div class="row mx-auto text-center">
            <h1 style="color:#3181e6;">Login to your account</h1>
        </div>
        <div class="row d-flex justify-content-center align-items-center h-100">
            <StatusMessage Message="@errorMessage" />
            <div class="col-md-9 col-lg-6 col-xl-5">
                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
                     class="img-fluid" alt="Sample image">
            </div>
            <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                <EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" EditContext="EditLogin" FormName="login" class="p-12 md:p-24">
                    @* <EditForm Model="@Input" EditContext="EditLogin" method="post" OnValidSubmit="LoginUser" FormName="login" class="p-12 md:p-24"> *@
                    <DataAnnotationsValidator />
                    <div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start d-none">
                        <p class="lead fw-normal mb-0 me-3">Sign in with</p>
                        <button type="button" class="btn btn-primary btn-floating mx-1">
                            <i class="fab fa-facebook-f"></i>
                        </button>

                        <button type="button" class="btn btn-primary btn-floating mx-1">
                            <i class="fab fa-twitter"></i>
                        </button>

                        <button type="button" class="btn btn-primary btn-floating mx-1">
                            <i class="fab fa-linkedin-in"></i>
                        </button>
                    </div>

                    <!-- Email input -->
                    <div class="form-outline mb-4">
                        <InputText @bind-Value="Input.Email" Name="emm" type="email" id="form3Example3" class="form-control form-control-lg"
                                   placeholder="Enter a valid email address" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                        <label class="form-label" for="form3Example3">Email address</label>
                    </div>

                    <!-- Password input -->
                    <div class="form-outline mb-3">
                        <InputText type="password" Name="password" @bind-Value="Input.Password" id="form3Example4" class="form-control form-control-lg"
                                   placeholder="Enter password" />
                        <ValidationMessage For="()=>Input.Password" />
                        <label class="form-label" for="form3Example4">Password</label>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <!-- Checkbox -->
                        <div class="form-check mb-0">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input me-2" id="form2Example3" />
                            <label class="form-check-label" for="form2Example3">
                                Remember me
                            </label>
                        </div>
                        <a href="#!" class="text-body">Forgot password?</a>
                    </div>

                    <div class="text-center text-lg-start mt-4 pt-2">
                        <button type="submit" class="btn btn-primary btn-lg"
                                style="padding-left: 2.5rem; padding-right: 2.5rem;">
                            Login
                        </button>
                        <p class="small fw-bold mt-2 pt-1 mb-0">
                            Don't have an account? <a href="/Register"
                                                      class="link-danger">Register</a>
                        </p>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="d-flex flex-column flex-md-row text-center text-md-start justify-content-between py-4 px-4 px-xl-5 bg-primary d-none">
        <!-- Copyright -->
        <div class="text-white mb-3 mb-md-0">
            Copyright © 2020. All rights reserved.
        </div>
        <!-- Copyright -->
        <!-- Right -->
        <div>
            <a href="#!" class="text-white me-4">
                <i class="fab fa-facebook-f"></i>
            </a>
            <a href="#!" class="text-white me-4">
                <i class="fab fa-twitter"></i>
            </a>
            <a href="#!" class="text-white me-4">
                <i class="fab fa-google"></i>
            </a>
            <a href="#!" class="text-white">
                <i class="fab fa-linkedin-in"></i>
            </a>
        </div>
        <!-- Right -->
    </div>
</section>

 <hr/>
 <section class="vh-100">
    <div class="container-fluid h-custom">
        <div class="row mx-auto text-center">
            <h1 style="color:#3181e6;">Login to your account</h1>
        </div>
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-md-9 col-lg-6 col-xl-5">
                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
                     class="img-fluid" alt="Sample image">
            </div>
            <StatusMessage Message="@errorMessage" />
            <div class="bg-white lg:w-5/12 md:6/12 w-10/12 shadow-3xl">
                <div class="bg-gray-800 absolute left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full p-4 md:p-8">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="#FFF">
                        <path d="M0 3v18h24v-18h-24zm6.623 7.929l-4.623 5.712v-9.458l4.623 3.746zm-4.141-5.929h19.035l-9.517 7.713-9.518-7.713zm5.694 7.188l3.824 3.099 3.83-3.104 5.612 6.817h-18.779l5.513-6.812zm9.208-1.264l4.616-3.741v9.348l-4.616-5.607z" />
                    </svg>
                </div>
                <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                    <EditForm Model="@Input" EditContext="EditLogin2" method="post" OnValidSubmit="LoginUser2" FormName="login2" class="p-12 md:p-24">
                        <DataAnnotationsValidator />
                        
                        <!-- Email input -->
                        <div class="form-outline mb-4">
                            <InputText @bind-Value="Input.Email" type="email" id="form3Example3" class="form-control form-control-lg"
                                       placeholder="Enter a valid email address" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                            <label class="form-label" for="form3Example3">Email address</label>
                        </div>
                        <div class="flex items-center text-lg mb-6 md:mb-8">
                            <svg class="absolute ml-3" viewBox="0 0 24 24" width="24">
                                <path d="m18.75 9h-.75v-3c0-3.309-2.691-6-6-6s-6 2.691-6 6v3h-.75c-1.24 0-2.25 1.009-2.25 2.25v10.5c0 1.241 1.01 2.25 2.25 2.25h13.5c1.24 0 2.25-1.009 2.25-2.25v-10.5c0-1.241-1.01-2.25-2.25-2.25zm-10.75-3c0-2.206 1.794-4 4-4s4 1.794 4 4v3h-8zm5 10.722v2.278c0 .552-.447 1-1 1s-1-.448-1-1v-2.278c-.595-.347-1-.985-1-1.722 0-1.103.897-2 2-2s2 .897 2 2c0 .737-.405 1.375-1 1.722z" />
                            </svg>
                            <InputText type="password" @bind-Value="Input.Password" class="bg-gray-200 pl-12 py-2 md:py-4 focus:outline-none w-full" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                
                        </div>
                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Remember me
                            </label>
                        </div>
                        <button class="bg-gradient-to-b from-gray-700 to-gray-900 font-medium p-2 md:p-4 text-white uppercase w-full">Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</section>


@code{

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    protected EditContext? EditLogin;
    protected EditContext? EditLogin2;

    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            //await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
         var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password+"ss", Input.RememberMe, lockoutOnFailure: false);        
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
    public async Task LoginUser2()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        
    }


    private sealed class LoginModel
    {
        [Required(ErrorMessage = "Please Fill The Field")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please Fill The Field")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}