@using System.Linq.Expressions

@typeparam TItem

<div class="dropdown-container" style="width:30px; padding:10px">
    @foreach (var item in Items)
    {
        <label>
            <InputCheckbox @bind-Value="@IsItemSelected[item]" /> 
            @DisplaySelector(item)
        </label>
    }

    <select >
        @foreach (var item in Items)
        {
            <input type="checkbox" id="@ValueSelector(item)" />
            <label style="color:darkorange; font-size:30px" for="@ValueSelector(item)">@DisplaySelector(item)</label>
            @* <option style="width:30px; padding:20px" value="@ValueSelector(item)">@DisplaySelector(item)</option> *@
        }
    </select>

</div>

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public IEnumerable<TItem> SelectedValue { get; set; }
    [Parameter] public Func<TItem, object> DisplayName { get; set; }
    [Parameter] public Expression<Func<TItem, int>> DisplayValue { get; set; }

    public Func<TItem, string> DisplayExpression { get; set; }

    [Parameter] public Func<TItem, string> DisplaySelector { get; set; }
    [Parameter] public Func<TItem, int> ValueSelector { get; set; }

    public Dictionary<TItem, bool> IsItemSelected { get; set; } = new Dictionary<TItem, bool>();


    protected override void OnParametersSet()
    {
        if (Items != null)
        {
            foreach (var item in Items)
            {
                var value = ValueSelector(item);
                if (!IsItemSelected.ContainsKey(item))
                    IsItemSelected[item] = false;
            }
        }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public IEnumerable<TItem> GetSelectedItems()
    {
        return IsItemSelected.Where(kvp => kvp.Value).Select(kvp => kvp.Key);
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}
